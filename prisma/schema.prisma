// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Level {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum Type {
  FREE
  PREMIUM
}

enum StatusOrder {
  PAID
  NOTPAID
}

enum StatusCourse {
  PROGRESS
  DONE
}

enum StatusModule {
  PROGRESS
  DONE
}

model User {
  id        String   @id @default(uuid())
  name      String
  image     String?
  handphone String
  country   String?
  city      String?
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createCourse Course[] @relation("userCreateCourse")
  updateCourse Course[] @relation("userUpdateCourse")
  deleteCourse Course[] @relation("userDeleteCourse")

  order          Order[]          @relation("userOrder")
  courseTracking CourseTracking[] @relation("userCourseTracking")
  moduleTracking ModuleTracking[] @relation("userModuleTracking")
  notification   Notification[]   @relation("userNotification")
}

model Course {
  id          String    @id @default(uuid())
  title       String
  image       String
  subtitle    String
  description String?
  classCode   String
  type        Type      @default(FREE)
  authorBy    String
  rating      Int
  price       Int
  level       Level     @default(BEGINNER)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  creator   User?  @relation("userCreateCourse", fields: [createdBy], references: [id])
  createdBy String
  updater   User?  @relation("userUpdateCourse", fields: [updatedBy], references: [id])
  updatedBy String
  deleter   User?  @relation("userDeleteCourse", fields: [deletedBy], references: [id])
  deletedBy String

  module Module[] @relation("moduleList")

  category   Category? @relation("courseCategory", fields: [categoryId], references: [id])
  categoryId String

  order          Order[]          @relation("courseOrder")
  courseTracking CourseTracking[] @relation("courseCourseTracking")
}

model Module {
  id        String   @id @default(uuid())
  title     String
  video     String
  time      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course   Course? @relation("moduleList", fields: [courseId], references: [id])
  courseId String

  moduleTracking ModuleTracking[] @relation("moduleTracking")
}

model Category {
  id     String   @id @default(uuid())
  title  String
  course Course[] @relation("courseCategory")
}

model Order {
  id        String      @id @default(uuid())
  status    StatusOrder @default(NOTPAID)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  user   User?  @relation("userOrder", fields: [userId], references: [id])
  userId String

  course   Course? @relation("courseOrder", fields: [courseId], references: [id])
  courseId String

  payment   Payment? @relation("paymentOrder", fields: [paymentId], references: [id])
  paymentId String
}

model CourseTracking {
  id String @id @default(uuid())

  status StatusCourse @default(PROGRESS)

  user   User?  @relation("userCourseTracking", fields: [userId], references: [id])
  userId String

  course   Course? @relation("courseCourseTracking", fields: [courseId], references: [id])
  courseId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ModuleTracking {
  id String @id @default(uuid())

  status StatusModule @default(PROGRESS)

  user   User?  @relation("userModuleTracking", fields: [userId], references: [id])
  userId String

  module   Module? @relation("moduleTracking", fields: [moduleId], references: [id])
  moduleId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id         String   @id @default(uuid())
  rek        String
  name       String
  number     Int
  cvv        Int
  expiryDate DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  order Order[] @relation("paymentOrder")
}

model Notification {
  id          String   @id @default(uuid())
  title       String
  subtitle    String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User?  @relation("userNotification", fields: [userId], references: [id])
  userId String
}
